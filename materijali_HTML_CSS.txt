==================== OSNOVI NA HTML I CSS ================

HTML:

HTML е кратенка за Hypertext Markup Language. Тоа е стандарден јазик за 
означување што се користи за креирање веб-страници и други видови онлајн 
содржини што може да се прикажат на интернет. HTML им овозможува на 
програмерите да ја структурираат содржината на веб-страница со дефинирање 
на наслови, параграфи, списоци, врски, слики и други елементи. Исто така, 
овозможува користење на листови со стилови и јазици за скриптирање како 
CSS и JavaScript за контрола на изгледот и однесувањето на веб-страниците.

HTML е составен од серија ознаки затворени во аголни загради. Ознаките ја 
дефинираат структурата и содржината на веб-страницата и може да вклучуваат 
атрибути кои специфицираат дополнителни информации за некој елемент. На 
пример, ознаката <img> се користи за вградување слика на веб-страница, а 
атрибутот src ја одредува URL-то или патеката на датотеката на сликата што 
треба да се прикаже.




HTML TAGS:

- <!DOCTYPE html> - This is the document type declaration for an HTML 
document, which tells the browser that the document is an HTML file.

- <html></html> - The <html> tag is the top-level element of an HTML 
document and represents the root of the document tree. It is used to 
enclose all other elements in the document and provides a container for 
the head and body sections of the document.

- <head></head> - The <head> tag is a container element in HTML that 
contains metadata about the web page, such as the title of the page, links 
to external stylesheets, scripts, and other important information that is 
not directly displayed on the web page. The <head> tag is located between 
the <html> and <body> tags of an HTML document.

- <title></title> - The <title> tag is an HTML element that defines the 
title of a web page. It is located within the <head> section of an HTML 
document and is used to provide a concise and descriptive title for the 
page.

- <meta/> - The <meta> tag is an HTML element used to provide metadata 
about a web page. Metadata is information about a web page that is not 
visible on the page itself, but is used by browsers, search engines, and 
other software to understand and process the content of the page. The 
<meta> tag can be used to specify various types of metadata, such as the 
page's title, author, description, keywords, character encoding, and more.

- <body></body> - The <body> tag is an HTML element that defines the 
visible content of a web page. The <body> tag is located within the <html> 
tag and contains all the content that will be displayed on the page, 
including text, images, links, videos, and other media.

- <p></p> - The <p> tag is an HTML element used to define paragraphs of 
text on a web page. It stands for "paragraph" and is used to create a 
block of text that is separated from surrounding content, typically with 
blank lines above and below it.

- <h1></h1> - The <h> tag is an HTML element used to create headings or 
headings of different levels on a web page. The "h" stands for "heading", 
and the number following the "h" indicates the level of the heading, where 
1 is the highest level and 6 is the lowest level.

- <img /> - The <img> tag is an HTML element used to insert an image into 
a web page. It is a self-closing tag, which means it does not require a 
closing tag.


Дополнителни материјали:

HTML
- https://www.w3schools.com/html/default.asp
- https://www.codecademy.com/learn/learn-html 
- https://developer.mozilla.org/en-US/docs/Web/HTML

Shortcuts, Extensions and basic setup for VSC
- https://www.youtube.com/watch?v=fJEbVCrEMSE



================== Втор Час ==================

HTML TAGS:

- <a/> - The <a> tag is an HTML element used to create a hyperlink or a 
link to another web page, a file, or a location on the same page. The "a" 
stands for "anchor", and it is also known as the anchor tag.

- <ol></ol> - The <ol> tag is used to create an ordered list, which is a 
list of items where each item is numbered or ordered in some way.

- <ul></ul> - The <ul> tag, on the other hand, is used to create an 
unordered list, which is a list of items where each item is not ordered or 
numbered in any particular way. 

- <li></li> - The <li> tag is an HTML element used to represent a single 
item in a list. It stands for "list item" and is used within <ol> (ordered 
list) or <ul> (unordered list) tags to define each individual item in the 
list.

- <header></header> - The <header> tag is an HTML element used to define 
the header section of a web page or a section of it. The header section 
typically contains introductory content, such as a logo, a navigation 
menu, a search bar, or other elements that appear at the top of a web 
page.

- <nav></nav> - The <nav> tag is an HTML element used to define a section 
of a web page that contains navigation links to other pages or sections of 
the same page. The <nav> element can be used within the <header> or 
<footer> tags, or within the <body> tag to define a specific navigation 
section within the content of the web page.

- <table></table> - The <table> tag is an HTML element used to create 
tables on a web page. Tables are used to display data in rows and columns, 
making it easier for users to read and compare information.

- <caption></caption> - The <caption> tag is an HTML element that is used 
to add a title or a caption to an HTML table. It is usually placed 
directly below the <table> tag, but before the <thead> tag, if present. 
The <caption> tag can contain any text, including HTML tags, and can be 
styled using CSS.

- <thead></thead> - The <thead> tag is an HTML element that is used to 
define the header section of an HTML table. It is typically used to group 
together the table's header content, which is usually the first row or 
rows of the table that contain column headings.



============== HTML FORMS - cas 3 =================


Examples and explanations:

-------- <input type="email" name="e-mail" id="e-mail" /> --------

This line of code creates an <input> element with three attributes: type, name, and id.

The TYPE attribute is set to "email", which indicates that this input is intended for entering an email address. This can provide some validation checks on the entered email address to ensure that it is in a valid format.

The NAME attribute is set to "e-mail", which is the name of the input control that will be sent to the server when the form is submitted. The server can then use this name to identify the email address that was entered.

The ID attribute is set to "e-mail", which provides a unique identifier for the input element. This can be used by JavaScript to access and manipulate the input control.

Overall, this line of code creates an email input control with the name "e-mail" and the ID "e-mail", which can be used for validation and identification purposes.



HTML TAGS

- <form></form> - The <form> tag is an HTML element used to create a container for interactive input elements, such as text fields, checkboxes, radio buttons, buttons, and more. It is used to collect user input and send it to a server for further processing.

The <form> tag has two main attributes: action and method.

The ACTION attribute specifies where the form data should be sent for processing. This is 
typically a URL that points to a server-side script that will process the form data.

The METHOD attribute specifies how the form data should be sent to the server. There are two possible values for this attribute: GET and POST. When using GET, the form data is appended to the URL as a query string, while with POST, the form data is sent in the request body.

- <input /> - The <input> element is a fundamental form element in HTML used to create a variety of form controls. It is a self-closing tag and can include several attributes that define the behavior of the input control, such as type, name, value, placeholder, and more.

The most common input types are:

text: used to create a single-line text input field
password: used to create a single-line password input field
email: used to create a single-line email input field
checkbox: used to create a checkbox control
radio: used to create a radio button control
submit: used to create a submit button control

- <label></label> - The <label> tag is another fundamental form element in HTML that is used to associate a label with an input control. The label is used to describe the purpose of the input control, and is typically displayed alongside the control.

-<button></button> - The <button> tag is used to create a clickable button on a web page. The button can perform different actions when clicked, such as submitting a form or triggering some JavaScript function. The <button> tag can contain text or other HTML elements, such as images or icons, to provide additional context or visual cues to the user.

- <textarea></textarea> The <textarea> tag in HTML is used to create a multi-line input field where users can enter text. Unlike the <input> tag which is used for single-line inputs, the <textarea> tag can accept multiple lines of text.

- <select></select> - The <select> tag in HTML is used to create a drop-down list of options that users can choose from. It is often used in HTML forms to allow users to select one or more options from a list.

- <option> - The <option> tag is used to define the options that appear in a drop-down list created with the <select> tag. Each option is defined with an <option> tag, and the content of the tag is the text that appears in the list for that option.

- <optgroup></optgroup> - The <optgroup> tag is used to group related options in a drop-down list created with the <select> tag. It is a child element of the <select> tag and can contain one or more <option> tags. 

-<fieldset></fieldset> - The <fieldset> tag is an HTML container element that is used to group related form elements together. It can be used to visually separate the form fields into logical sections or categories.

- <div></div> - The div tag is used to create a block-level container element that groups other HTML elements together. It is used to divide sections of a webpage into distinct and meaningful parts, such as header, navigation, content, and footer. The div tag has a default display property of block, which means it starts on a new line and takes up the entire width available. The div tag is often used with CSS styling to apply a common style to multiple elements within the container.

- <span></span> - The span tag is used to create an inline-level container element that is used to group inline-level elements together. It is often used to apply styles to a small portion of text, such as a single word or phrase within a paragraph. The span tag has a default display property of inline, which means it does not start on a new line and only takes up the width of its contents.


За проверка на знаењето:
HTML Quiz: https://www.w3schools.com/quiztest/quiztest.asp?qtest=HTML 
HTML Exercises with solution: https://www.w3resource.com/html-css-exercise/basic/ 

=============== CSS ================

--------- What is CSS? -----------

CSS stands for Cascading Style Sheets. It is a language used for 
describing the presentation and styling of HTML documents. With CSS, you 
can control the layout, fonts, colors, spacing, and other visual aspects 
of your web pages.

- CSS is the language we use to style an HTML document.
- CSS describes how HTML elements should be displayed.


Three Ways to Insert CSS:
- External CSS
- Internal CSS
- Inline CSS


-------- CSS Selectors ---------

-Element Selector - The element selector is used to target HTML elements 
based on their tag name. For example, if you want to apply styles to all 
the paragraph elements on a web page, you can use the element selector 
"p".

-Id Selector - The ID selector is a CSS selector that is used to target an 
HTML element based on its unique ID attribute. An ID is a unique 
identifier that can be assigned to an element in HTML, and it is used to 
differentiate that element from others on the page. The ID selector is 
denoted by the "#" symbol followed by the ID name.

-Class Selector - The class selector in CSS is used to select elements 
with a specific class attribute. It allows you to apply a specific style 
to a group of elements based on a shared class name. To define a class 
selector, you use a period (.) followed by the class name. Using classes 
makes it easy to apply consistent styles to groups of elements throughout 
your website. You can use multiple classes on a single element, and you 
can combine class selectors with other selectors to create more specific 
rules.

-The Universal Selector - The Universal Selector in CSS is denoted by the 
asterisk (*) symbol and selects all elements in an HTML document. It can 
be used to apply styles to all elements, regardless of their type or 
location within the HTML document.

-The Grouping Selector - The CSS Grouping Selector allows you to apply the 
same set of styles to multiple selectors at once. It is denoted by 
separating multiple selectors by commas. For example, suppose you want to 
apply the same font family and font color to all h1, h2, and h3 headings.


List of the selectors by their precedence:

1. Inline styles (style attribute)
2. ID selectors 
3. Class selectors
4. Attribute selectors
5. Pseudo-classes
6. Element selectors
7. Universal selector


================ CSS Vtor Cas ==============

--------- Box Model -----------

The box model is a concept in web design that describes how elements are displayed on a webpage in a rectangular box. It consists of four parts: content, padding, border, and margin.

The content area is the space where the actual content of the element is displayed, such as text or images. 
The padding is the space between the content and the border, and it can be used to add space within an element. 
The border is a line that surrounds the content and padding, and it can be used to add visual style or to create 
a boundary around an element. The margin is the space between the border of an element and other elements on 
the page, and it can be used to create spacing between elements.

The box model is important to understand when creating and designing web pages, as it allows developers and 
designers to control the size, position, and spacing of elements on the page. By adjusting the values of 
the content, padding, border, and margin, designers can create a variety of different layouts and designs.


CSS properties:

- Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values.

1. Named colors: CSS supports 147 named colors, such as "red", "green", "blue", "orange", etc.

2. Hexadecimal colors: A hexadecimal color is a six-digit code that represents the amount of red, green, and blue in a color. 
For example, #FF0000 is the hexadecimal code for red.

3. RGB colors: RGB stands for red, green, blue. In CSS, you can define colors using the RGB color model, which 
consists of three values: the amount of red, green, and blue in the color. For example, rgb(255, 0, 0) is the RGB value for red.

4. RGBA colors: RGBA stands for red, green, blue, alpha. The alpha value determines the opacity of the color. 
For example, rgba(255, 0, 0, 0.5) is a red color with 50% opacity.

5. HSL colors: HSL stands for hue, saturation, and lightness. Hue is a degree on the color wheel, saturation is 
the amount of gray in the color, and lightness is the amount of white or black in the color. 
For example, hsl(0, 100%, 50%) is a pure red color.

6. HSLA colors: HSLA stands for hue, saturation, lightness, and alpha. The alpha value determines the opacity of the color. 
For example, hsla(0, 100%, 50%, 0.5) is a pure red color with 50% opacity.


- border - The CSS border properties allow you to specify the style, width, and color of an element's border.

- The border-radius property is used to add rounded borders to an element

- margin is used to create space around elements, outside of any defined borders.

- padding is used to create space around an element's content, inside of any defined borders.

- height and width properties are used to set the height and width of an element.

- outline is a line drawn outside the element's border.

-box-sizing - is a property that controls how the width and height of an element are calculated. By default, the width and height of an element is calculated as the content width and height plus any padding and borders that are applied. This means that if you specify a width or height for an element, any padding or borders that you add will increase the overall width or height of the element.


---------- Generic Font Families ------------

In CSS there are five generic font families:

- Serif fonts have a small stroke at the edges of each letter. They create a sense of formality and elegance.
- Sans-serif fonts have clean lines (no small strokes attached). They create a modern and minimalistic look.
- Monospace fonts - here all the letters have the same fixed width. They create a mechanical look. 
- Cursive fonts imitate human handwriting.
- Fantasy fonts are decorative/playful fonts.


OBJASNUVANJE ZA BOX_SHADOW:

Example: box-shadow: 0 0 10px 5px rgba(0, 0, 0, 0.2);

The box-shadow property in CSS is used to add a shadow effect to an element. The values of the property are:

0: This is the horizontal offset of the shadow. In this case, the shadow is not offset horizontally, so it is set to 0.

0: This is the vertical offset of the shadow. In this case, the shadow is not offset vertically, so it is set to 0.
10px: This is the blur radius of the shadow. The higher the value, the more blurred the shadow will appear. In this case, the blur radius is set to 10px.

5px: This is the spread radius of the shadow. The higher the value, the more the shadow will spread out. In this case, the spread radius is set to 5px.

rgba(0, 0, 0, 0.2): This is the color and transparency of the shadow. In this case, the shadow color is black (0, 0, 0) and the opacity is set to 0.2.
So, this code will add a black shadow to an element with a blur radius of 10px, a spread radius of 5px, and a transparency of 0.2.


--------- CSS Properties --------------

- background-image - sets one or more background images for an element. The background image can be a URL pointing to an image file, or it can be a gradient, 
which is a CSS image created by a series of color stops.

- background-repeat - specifies how the background image is repeated within the background of an element. It accepts four different values: repeat, repeat-x, repeat-y, no-repeat.

- background-size - The background-size property in CSS specifies the size of the background images. 
It determines how the background image will be sized and displayed within its container. 

- background-position - The background-position property in CSS is used to set the starting position of a background image or background color within an element. 
It takes two values, which can be either keywords or length values, and specifies where the background image or color should start from.

- overflow - The overflow property in CSS is used to control what happens to the content that overflows its containing element. 
It specifies whether to clip the content or to add scrollbars when the content exceeds the size of the container. 
It can be used on any element, but it is most commonly used on containers such as <div> elements to control the overflow of their child elements.

- float - The CSS float property is used to specify how an element should float or align within its parent container. 
The float property can take one of three values: left, right, and none.
When an element is floated, it is taken out of the normal flow of the document and positioned to the left or right of its containing element. 
Any other content in the document will flow around the floated element.

- box-shadow - Box shadow is a CSS property that allows you to add a shadow effect to an element. 
The shadow can be customized by adjusting properties such as its color, size, blur, and spread. 
The box shadow is a way to give depth and dimension to an element on a web page, making it stand out from other elements on the page. 
It can be used to create visual hierarchy, emphasis, or simply add a decorative effect to a design.

================ CAS 7 ===================

--------- CSS Properties -----------

- position - the position property in CSS is used to set the positioning of an element. There are five possible values for the position property:

1. static: This is the default value. It means the element will be positioned according to the normal flow of the page.

2. relative: This value positions the element relative to its normal position in the page.

3. absolute: This value positions the element relative to its nearest positioned ancestor (i.e. an element with position set to relative, absolute, or fixed).

4. fixed: This value positions the element relative to the browser window. The element remains in the same position even if the page is scrolled.

4. sticky: This value positions the element based on the user's scroll position. The element will behave like relative until it reaches a certain point,
 at which point it will become fixed.

- z-index - is a CSS property that controls the vertical stacking order of positioned elements that overlap. 
It works by assigning a value to the z-index property of an element, with higher values placing the element above elements with lower values. 
By default, all elements have a z-index of auto, meaning they are layered in the order they appear in the HTML code. 
However, if an element has a position value of absolute, fixed, or relative, the z-index property can be used to modify its stacking order.

- transform - The transform property allows you to apply transformations to an element, such as rotating, scaling, skewing, or translating it. 
It can be used to change the appearance and position of an element on a webpage without actually modifying its HTML code.

=============== CAS 8 ===============

Flexbox is a layout module in CSS that provides a more efficient and flexible way to organize, align and distribute space among items in a container. 
It allows you to easily create complex and responsive layouts without having to use complicated floats or positioning.

The flexbox layout is based on two types of elements: the container and the items. The container is the parent element that holds the items. 
The items are the child elements that are arranged inside the container.


------------ Flexbox Properties -------------

- display: flex - defines the container as a flex container.

- flex-direction - defines the direction in which the items are arranged (row, column, row-reverse, column-reverse).

- justify-content - defines how the items are aligned horizontally in the container (center, flex-start, flex-end, space-between, space-around, space-evenly).

- align-items - defines how the items are aligned vertically in the container (center, flex-start, flex-end, stretch, baseline).

- flex-wrap - defines whether the items should wrap to a new line when there is not enough space in the container (nowrap, wrap, wrap-reverse).

- flex-grow - defines how much the item should grow relative to the other items in the container.

- flex-shrink - defines how much the item should shrink relative to the other items in the container.

- align-self - is used to align a flex item along the cross axis, which is perpendicular to the main axis in a flex container. 
It works similarly to align-items, which aligns all the flex items along the cross axis as a group, but align-self is used to target a specific flex item and override its alignment.

- order - is used to specify the order in which the flex items are displayed within a flex container. 
By default, flex items are laid out in the order in which they appear in the source code. However, the order property allows you to change this order, 
and therefore the visual display order, of the flex items. The order property takes a positive or negative integer value. By default, all flex items have an order value of 0. 
A positive value for order will push the item to the end of the flex container, while a negative value will push it to the beginning.


Additional Materials: 
1. https://css-tricks.com/snippets/css/a-guide-to-flexbox/  
2. https://flexboxfroggy.com/ 


=================== CAS 9 ==================

----------- Responsive Design -----------

Responsive design is an approach to web design that aims to create a website that can adjust and adapt to different screen sizes and devices.
 This means that the website will look good and be usable on a desktop computer, laptop, tablet, or smartphone, regardless of the screen size or orientation.

Responsive design typically involves using fluid grids, flexible images, and media queries to adjust the layout and content of the website based on the size of the screen.  
This can include changing the size and position of elements, hiding or showing certain elements, and changing the font size and line height.

The goal of responsive design is to create a consistent user experience across all devices, and to ensure that the website is easy to use and navigate, no matter how it is accessed.


----------- Media Query --------------

A media query is a CSS technique that allows styles to be applied based on the characteristics of the device being used to view a web page. 
In other words, it's a way of specifying different styles for different devices, screen sizes, and orientations. 
Media queries can be used to create responsive designs that adjust their layout and styling to provide the best possible user experience on different devices,
 such as smartphones, tablets, laptops, and desktops.

Media queries are defined using the @media rule in CSS, and they allow you to specify different styles for different viewport sizes.
 For example, you might define a media query that applies a different font size and layout for screens that are smaller than 768 pixels wide. 
 When a device's screen size matches the conditions specified in the media query, the styles defined within that media query are applied to the page.

Most often, max-width and min-width are used in the media query when developing a responsive web sites.

- max-width: applies styles when the screen width is less than or equal to a specified value.
- min-width: applies styles when the screen width is greater than or equal to a specified value.

In other words, max-width is used to target smaller screens, while min-width is used to target larger screens.

For example, if you want to apply a specific style to screens that are 768px wide or smaller, you would use max-width: 768px. 
If you want to apply a style to screens that are 769px or wider, you would use min-width: 769px.


Additional materials:
1. https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design
2. https://web.dev/learn/design/